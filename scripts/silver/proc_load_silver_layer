-- ===================================================================
-- Stored Procedure: sp_load_silver_layer_data
-- Purpose: Full Load & Transformation from Bronze to Silver Layer
-- Description: Applies data cleaning, validation, and enrichment rules
--              with batch-level time tracking for each entity.
-- Author: [Your Name]
-- Last Updated: [Date]
-- ===================================================================

DROP PROCEDURE IF EXISTS sp_load_silver_layer_data;

CREATE OR REPLACE PROCEDURE sp_load_silver_layer_data()
LANGUAGE plpgsql
AS $$
DECLARE
    proc_start_time     TIMESTAMP := clock_timestamp();
    proc_end_time       TIMESTAMP;
    batch_start_time    TIMESTAMP;
    batch_end_time      TIMESTAMP;
    elapsed_time        INTERVAL;
BEGIN
    RAISE NOTICE 'Silver Layer Load Started: %', proc_start_time;

    -- =====================================================
    -- CRM Customer Info
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading CRM Customer Info...';

    TRUNCATE TABLE silver.crm_cust_info;

    INSERT INTO silver.crm_cust_info (
        cst_id, cst_key, cst_firstname, cst_lastname,
        cst_marital_status, cst_gndr, cst_create_date
    )
    SELECT 
        cst_id, cst_key,
        TRIM(cst_firstname),
        TRIM(cst_lastname),
        CASE 
            WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
            WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
            ELSE 'n/a'
        END,
        CASE 
            WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
            WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
            ELSE 'n/a'
        END,
        cst_create_date
    FROM (
        SELECT *,
            ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
        FROM bronze.crm_cust_info
        WHERE cst_id IS NOT NULL
    ) t
    WHERE flag_last = 1;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'CRM Customer Info Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- CRM Product Info
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading CRM Product Info...';

    TRUNCATE TABLE silver.crm_prd_info;

    INSERT INTO silver.crm_prd_info (
        prd_id, cat_id, prd_key, prd_nm, prd_cost,
        prd_line, prd_start_dt, prd_end_dt
    )
    SELECT 
        prd_id,
        REPLACE(LEFT(prd_key, 5), '-', '_') AS cat_id,
        SUBSTRING(prd_key FROM 7) AS prd_key,
        prd_nm,
        COALESCE(prd_cost, 0),
        CASE 
            WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
            WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
            WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other sales'
            WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
            ELSE 'n/a'
        END,
        CAST(prd_start_dt AS DATE),
        CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE)
    FROM bronze.crm_prd_info;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'CRM Product Info Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- CRM Sales Details
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading CRM Sales Details...';

    TRUNCATE TABLE silver.crm_sales_details;

    INSERT INTO silver.crm_sales_details (
        sls_ord_num, sls_prd_key, sls_cust_id,
        sls_order_dt, sls_ship_dt, sls_due_dt,
        sls_sales, sls_quantity, sls_price
    )
    SELECT 
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        CASE 
            WHEN sls_order_dt = '0' OR LENGTH(sls_order_dt) <> 8 THEN NULL
            ELSE TO_DATE(sls_order_dt, 'YYYYMMDD')
        END,
        CASE 
            WHEN sls_ship_dt = '0' OR LENGTH(sls_ship_dt) <> 8 THEN NULL
            ELSE TO_DATE(sls_ship_dt, 'YYYYMMDD')
        END,
        CASE 
            WHEN sls_due_dt = '0' OR LENGTH(sls_due_dt) <> 8 THEN NULL
            ELSE TO_DATE(sls_due_dt, 'YYYYMMDD')
        END,
        ROUND(
            CASE 
                WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
                    THEN sls_quantity * ABS(sls_price)
                ELSE sls_sales
            END, 2),
        sls_quantity,
        ROUND(
            CASE 
                WHEN sls_price IS NULL OR sls_price <= 0
                    THEN sls_sales / NULLIF(sls_quantity, 0)
                ELSE sls_price
            END, 2)
    FROM bronze.crm_sales_details;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'CRM Sales Details Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- ERP Customer
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading ERP Customer...';

    TRUNCATE TABLE silver.erp_cust_az12;

    INSERT INTO silver.erp_cust_az12 (
        cid, bdate, gen
    )
    SELECT 
        CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LENGTH(cid)) ELSE cid END,
        CASE WHEN bdate > CURRENT_DATE THEN NULL ELSE bdate END,
        CASE 
            WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
            WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
            ELSE 'n/a'
        END
    FROM bronze.erp_cust_az12;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'ERP Customer Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- ERP Location
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading ERP Location...';

    TRUNCATE TABLE silver.erp_loc_a101;

    INSERT INTO silver.erp_loc_a101 (
        cid, cntry
    )
    SELECT 
        REPLACE(cid, '-', ''),
        CASE 
            WHEN TRIM(cntry) = 'DE' THEN 'Germany'
            WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
            WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
            ELSE TRIM(cntry)
        END
    FROM bronze.erp_loc_a101;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'ERP Location Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- ERP Product Category
    -- =====================================================
    batch_start_time := clock_timestamp();
    RAISE NOTICE 'Loading ERP Product Category...';

    TRUNCATE TABLE silver.erp_px_cat_g1v2;

    INSERT INTO silver.erp_px_cat_g1v2 (
        id, cat, subcat, maintenance
    )
    SELECT 
        id, cat, subcat, maintenance
    FROM bronze.erp_px_cat_g1v2;

    batch_end_time := clock_timestamp();
    elapsed_time := batch_end_time - batch_start_time;
    RAISE NOTICE 'ERP Product Category Loaded. Time taken: %', elapsed_time;

    -- =====================================================
    -- Procedure Completion
    -- =====================================================
    proc_end_time := clock_timestamp();
    RAISE NOTICE 'Silver Layer Data Load Completed at: %', proc_end_time;
    RAISE NOTICE 'Total Duration: %', proc_end_time - proc_start_time;
END;
$$;
